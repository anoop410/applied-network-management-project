#! /usr/bin/perl
 

#use warnings;
 
use Net::SNMP;
use DBI;

require "dbpath.pl";
require "$realpath";
require "table.pl";
table();
my $OID_sysUpTime = '1.3.6.1.2.1.1.3.0';

while(1)
{
#retrivind data from database
 $sth = $dbh->prepare("SELECT * FROM uptime");
  $sth->execute();


#fetchrow array
while (@row = $sth->fetchrow())
{
# Create a session for each host and queue a get-request for sysUpTime.
  $ip=$row[1];
  $community=$row[3];
  $port=$row[2];
  
   my ($session, $error) = Net::SNMP->session(
      -hostname    => $ip,
      -port        => $port,
      -community   => $community,
      -nonblocking => 1,
   );
 
   if (!defined $session) {
      printf "ERROR: Failed to create session for host '%s': %s.\n",
             $ip, $error;
      next;
 }
   my $result = $session->get_request(
      -varbindlist => [ $OID_sysUpTime ],
      -callback    => [ \&get_callback,$ip, $port, $community],
   );
  # $total = $session->retries([$count]);
 
   if (!defined $result) {
      printf "ERROR: Failed to queue get request for host '%s': %s.\n",
             $session->hostname(), $session->error();
   }
 
} 
 $sth->finish();
# Now initiate the SNMP message exchange.
 
snmp_dispatcher();
sleep(30);
}

sub get_callback
{
   my ($session, $ip, $port, $community) = @_;

   my $result = $session->var_bind_list();

   if (!defined $result){
      printf "ERROR: Get request failed for host '%s': %s.\n",
             $session->hostname(), $session->error();
$dbh->do("UPDATE uptime SET sent = sent+1, lost = lost+1 WHERE IP = '$ip' AND PORT = '$port' AND COMMUNITY = '$community'") or die "fkfkvnkkjdnlvjz";
return;
}
  printf "The sysUpTime for host '%s'is %s.\n",
           $session->hostname(),$result->{$OID_sysUpTime};

$dbh->do("UPDATE uptime SET sent = sent+1 where IP = '$ip' AND PORT = '$port' AND COMMUNITY = '$community';") or die "fkfkvnkkjdnlvjz";
$dbh->do("UPDATE uptime SET uptime = '".$result->{$OID_sysUpTime}."' where IP = '$ip' AND PORT = '$port' AND COMMUNITY = '$community'");
}


